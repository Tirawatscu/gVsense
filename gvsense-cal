#!/usr/bin/env python3
"""
gVsense Calibration Management CLI
Command-line interface for managing MCU oscillator calibration
"""

import sys
import argparse
import json
from calibration_storage import CalibrationStorage

def main():
    parser = argparse.ArgumentParser(description='gVsense Calibration Management')
    parser.add_argument('command', choices=['list', 'read', 'set', 'clear'], 
                       help='Command to execute')
    parser.add_argument('device_id', nargs='?', help='Device ID (e.g., XIAO-1234)')
    parser.add_argument('--ppm', type=float, help='PPM value for set command')
    parser.add_argument('--source', default='manual', 
                       choices=['manual', 'pps', 'learned'],
                       help='Calibration source')
    parser.add_argument('--note', help='Notes for calibration')
    parser.add_argument('--base-dir', default='/var/lib/gvsense',
                       help='Base directory for calibration storage')
    
    args = parser.parse_args()
    
    if args.command in ['read', 'set', 'clear'] and not args.device_id:
        parser.error(f"Device ID required for {args.command} command")
    
    if args.command == 'set' and args.ppm is None:
        parser.error("--ppm required for set command")
    
    storage = CalibrationStorage(args.base_dir)
    
    try:
        if args.command == 'list':
            devices = storage.list_devices()
            if devices:
                print("Devices with calibration data:")
                for device_id in devices:
                    info = storage.get_calibration_info(device_id)
                    if info:
                        print(f"  {device_id}: {info['modified_time']}")
            else:
                print("No devices with calibration data found")
                
        elif args.command == 'read':
            cal_data = storage.load_calibration(args.device_id)
            if cal_data:
                print(f"Device: {cal_data['device_id']}")
                print(f"PPM: {cal_data['ppm']}")
                print(f"Source: {cal_data['source']}")
                print(f"Last Update: {cal_data['last_update_utc']}")
                print(f"Notes: {cal_data.get('notes', '')}")
            else:
                print(f"No calibration found for device {args.device_id}")
                return 1
                
        elif args.command == 'set':
            success = storage.save_calibration(args.device_id, args.ppm, args.source, 
                                             notes=args.note or "")
            if success:
                print(f"Calibration set for {args.device_id}: {args.ppm} ppm")
            else:
                print(f"Failed to set calibration for {args.device_id}")
                return 1
                
        elif args.command == 'clear':
            success = storage.clear_calibration(args.device_id)
            if success:
                print(f"Calibration cleared for {args.device_id}")
            else:
                print(f"Failed to clear calibration for {args.device_id}")
                return 1
                
    except Exception as e:
        print(f"Error: {e}")
        return 1
    
    return 0

if __name__ == '__main__':
    sys.exit(main())